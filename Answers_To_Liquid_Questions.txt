Anthony Spain
10/19/21

Liquid Challenge Questions

1.) 
To make a line of text in a homepage section editable from the customize menu you would first have to make a dynamic section file. 
The schema should contain presets in order to make it a dynamic section. In the settings area you would create an object that at 
minimum should contain three properties, a type, an id, and a label. You would output this above the schema with HTML and using 
liquid output to reference the settings in the schema. A simple example would be:

{%- if section.settings.homepage_text != blank -%}
  <p>{{ section.settings.homepage_text }}</p>
{%- endif -%}

{% schema %}
{
"name": "Text on Homepage",
"class": "text-on-homepage",
"tag": "section",
"settings": [
  {
    "type": "header",
    "content": "Homepage Section"
  },
  {
    "type": "text",
    "id": "homepage_text",
    "label": "Homepage Text"
  }

],
"blocks": [

],
"presets": [
  {
  "name": "Text on Homepage",
  "category":"Custom",
  "settings": {
  }
}
]

}
{% endschema %}


2.) 
To add the featured image of a collection as a banner on the collection page you would first open collection.liquid. 
You can make the edit here, or typically there is another section call to “collection-template.liquid” where I would make this edit. 
First I would use liquid to check if there is a collection image at all, and if there was I could simply use HTML, CSS, and liquid to 
build it. Not taking srcset or lazyloading into account, I could simply make a div that spans the entire width of the page with an 
image tag:

{%- if collection.image -%}
<style>
.collection-banner img {
  width: 100%;
}
</style>
<div class="collection-banner">
  <img src="{{ collection.image | img_url: "master" }}">
</div> 
{%- endif -%}

Alternatively I could set it as a background image for the container and give the container a set height:

{%- if collection.image -%}
<style>
.collection-banner {
  background-image: url({{ collection.image | img_url: "master" }});
  background-size: cover;
  background-position: center center;
  width: 100%;
  height: 500px;
}
</style>
<div class="collection-banner">
</div> 
{%- endif -%}

If I were to take lazyloading and srcset into account I would make a separate snippet that contained all of the width and height 
conditions similar to what is done in Debut theme, pass the collection image to the snippet and output the snippet in the appropriate 
data attribute that it needs to be set at depending on the lazy loader being used.


3.) 
To create a simple pagination quickly, you could use the default pagination and just use CSS to style it:

{%- if paginate.pages > 1 -%}
<div class="new-pagination">
{{ paginate | default_pagination }}
</div>
{%- endif -%}

Alternatively to build your own custom pagination you could use the pagination object, a simple example would be:

{%- if paginate.pages > 1 -%}
  <ol class="new-pagination">
    {%- if paginate.previous-%}
    <li class="pagination-item">
      <a href="{{ paginate.previous.url }}">&laquo;</a>
    </li>
    {%- else -%}
    <li class="pagination-item paginate-disabled">
      &laquo;
    </li>
    {%- endif -%}

    {%- for part in paginate.parts -%}
    {%- if part.is_link -%}
    <li class="pagination-item">
      <a href="{{ part.url }}">{{ part.title }}</a>
    </li>
    {%- else -%}
    {%- if part.title == paginate.current_page -%}
    <li class="pagination-item paginate-active">
      {{ part.title }}
    </li>
    {%- else -%}
    <li class="pagination-item">
      {{ part.title }}
    </li>
    {%- endif -%}
    {%- endif -%}
    {%- endfor -%}

    {%- if paginate.next -%}
    <li class="pagination-item">
      <a href="{{ paginate.next.url }}">&raquo;</a>
    </li>
    {%- else -%}
    <li class="pagination-item paginate-disabled">
      &raquo;
    </li>
    {%- endif -%}
  </ol>
{%- endif -%}


4.) 
To access the product Blue T-Shirt and assign the variables, I would use the product's handle and use all_products:

{% assign product = all_products['blue-t-shirt'] %}
{% assign product_title = product.title %}
{% assign product_handle = product.handle %}
{% assign product_price = product.price %}
{% assign product_url = product.url %}
{% assign product_image = product.featured_image %}

5.) 
Since associative arrays aren't possible in liquid, you can achieve this by first creating a string of the key:value pairs separated 
by a common character. Then split the string by that character to create the array. Loop through the array and split the array item 
by the colon that separates the key:value. Directly after, create a case statement for the first item in the split, which is the key. 
When the key is "fruit" create a variable called "fruit" and assign the second item of the split, which is the value, to the variable:

{%- assign string = 'fruit:apple,vegetable:carrot,cloth:t-shirt,denim:jeans' -%}

{% assign array = string | split: ',' %}

{% for item in array %}
{% assign key = item | split: ':' | first %}
  {% case key %}
    {% when 'fruit' %}
      {% assign fruit = item | split: ':' | last %}
    {% when 'vegetable' %}
      {% assign vegetable = item | split: ':' | last %}
    {% when 'cloth' %}
      {% assign cloth = item | split: ':' | last %}
    {% when 'denim' %}
      {% assign denim = item | split: ':' | last %}
  {% endcase %}
{% endfor %}
{{ fruit }}, {{ vegetable }}, {{ cloth }}, {{ denim }}